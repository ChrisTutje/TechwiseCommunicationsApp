AudioWorkletProcessor.prototype._c2=function(){this._d2=true;this.port.onmessage=(_e2)=>{if(_e2.data==="kill")this._d2=false;};};class _f2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._c2();}process(_g2,_h2,parameters){const input=_g2[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _i2=input[c];for(let _j2=0;_j2<_i2.length;++_j2){const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];
_h2[_k2][c][_j2]=_i2[_j2];}}return this._d2;}}class _l2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._c2();}process(_g2,_h2,parameters){const _m2=_g2[0];const _n2=_g2[1];const output=_h2[0];const gain=parameters.gain;for(let c=0;c<_n2.length;++c){const _i2=_n2[c];const _o2=output[c];for(let _j2=0;_j2<_i2.length;++_j2)_o2[_j2]=_i2[_j2];}for(let c=0;c<_m2.length;++c){const _i2=_m2[c];const _o2=output[c];
for(let _j2=0;_j2<_i2.length;++_j2){const _p2=(gain[_j2]!==undefined)?gain[_j2]:gain[0];_o2[_j2]+=_i2[_j2]*_p2;}}return this._d2;}}registerProcessor("audio-bus-input",_f2);registerProcessor("audio-bus-output",_l2);class _q2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _r2=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_s2){super();this._c2();const _t2=_s2.outputChannelCount[0];this._u2=new Float32Array(_t2);this._v2=new Uint32Array(_t2);}process(_g2,_h2,parameters){const input=_g2[0];const output=_h2[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _i2=input[c];const _o2=output[c];for(let _j2=0;_j2<_i2.length;++_j2){_o2[_j2]=_i2[_j2];if(this._v2[c]===0)this._u2[c]=_i2[_j2];const _w2=(factor[_j2]!==undefined)?factor[_j2]:factor[0];++this._v2[c];this._v2[c]%=_w2;const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];if(_k2>0.0){continue;}let _x2=this._u2[c];const _p2=(gain[_j2]!==undefined)?gain[_j2]:gain[0];_x2*=_p2;_x2=Math.max(Math.min(_x2,
1.0),-1.0);const _y2=(resolution[_j2]!==undefined)?resolution[_j2]:resolution[0];const max=(_x2>0.0)?_q2._r2[_y2]-1:_q2._r2[_y2];_x2=Math.round(_x2*max)/max;const _z2=(mix[_j2]!==undefined)?mix[_j2]:mix[0];_o2[_j2]*=(1.0-_z2);_o2[_j2]+=(_x2*_z2);}}return this._d2;}}registerProcessor("bitcrusher-processor",_q2);class _A2{constructor(_B2=1e-3){this.setTime(_B2);}setTime(_B2){this._C2=Math.exp(-1/(_B2*sampleRate));}process(_D2,_E2){return _D2+this._C2*(_E2-_D2);}}class _F2{constructor(_G2,_H2){this._I2=new _A2(_G2);
this._J2=new _A2(_H2);this._K2=_G2;this._L2=_H2;}_M2(_B2){if(_B2===this._K2)return;this._I2.setTime(_B2);this._K2=_B2;}_N2(_B2){if(_B2===this._L2)return;this._J2.setTime(_B2);this._L2=_B2;}process(_D2,_E2){if(_D2>_E2)return this._I2.process(_D2,_E2);else return this._J2.process(_D2,_E2);}}class _O2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_P2){super();this._c2();const _I2=_O2.parameterDescriptors.find(_Q2=>_Q2.name==="attack");const _J2=_O2.parameterDescriptors.find(_Q2=>_Q2.name==="release");
this._R2=new _F2(_I2.defaultValue,_J2.defaultValue);this._S2=0;}process(_T2,_U2,_V2){const input=_T2[0];const output=_U2[0];const bypass=_V2.bypass;const ingain=_V2.ingain;const outgain=_V2.outgain;const threshold=_V2.threshold;const ratio=_V2.ratio;const attack=_V2.attack;const release=_V2.release;if(input.length===0)return this._d2;for(let _j2=0;_j2<input[0].length;++_j2){let frame=input.map(_W2=>_W2[_j2]);output.forEach((_W2,_X2)=>{_W2[_j2]=frame[_X2];});const _Y2=(ingain[_j2]!==undefined)?ingain[_j2]:ingain[0];
frame=frame.map(_Z2=>_Z2*=_Y2);const rect=frame.map(_Z2=>Math.abs(_Z2));const max=Math.max(...rect);const __2=_03(max);const _13=(threshold[_j2]!==undefined)?threshold[_j2]:threshold[0];const _23=_03(_13);const _33=Math.max(0,__2-_23);const _I2=(attack[_j2]!==undefined)?attack[_j2]:attack[0];const _J2=(release[_j2]!==undefined)?release[_j2]:release[0];this._R2._M2(_I2);this._R2._N2(_J2);this._S2=this._R2.process(_33,this._S2);const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];if(_k2>0)continue;const _y2=(ratio[_j2]!==undefined)?ratio[_j2]:ratio[0];
const _43=(this._S2/_y2)-this._S2;const _p2=_53(_43);frame=frame.map(_Z2=>_Z2*=_p2);const _63=(outgain[_j2]!==undefined)?outgain[_j2]:outgain[0];frame=frame.map(_Z2=>_Z2*=_63);output.forEach((_W2,_X2)=>{_W2[_j2]=frame[_X2];});}return this._d2;}}function _03(_73){return 20*Math.log10(_73);}function _53(_73){return Math.pow(10,_73/20);}registerProcessor("compressor-processor",_O2);class _83 extends AudioWorkletProcessor{static _93=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_83._93},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_s2){super();this._c2();const _t2=_s2.outputChannelCount[0];const _a3=(_83._93*sampleRate)+1;this.buffer=new Array(_t2);this._b3=new Uint32Array(_t2);for(let c=0;c<_t2;++c)this.buffer[c]=new Float32Array(_a3);
}process(_g2,_h2,parameters){const input=_g2[0];const output=_h2[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _i2=input[c];const _o2=output[c];for(let _j2=0;_j2<_i2.length;++_j2){_o2[_j2]=_i2[_j2];const _13=(time[_j2]!==undefined)?time[_j2]:time[0];const _c3=this._d3(c,_13);const _w2=(feedback[_j2]!==undefined)?feedback[_j2]:feedback[0];const _e3=_i2[_j2]+(_c3*_w2);this.write(c,_e3);const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];
if(_k2>0.0){continue;}const _z2=(mix[_j2]!==undefined)?mix[_j2]:mix[0];_o2[_j2]*=(1-_z2);_o2[_j2]+=(_c3*_z2);}}return this._d2;}_d3(_f3,_B2){const _g3=_B2*sampleRate;let _h3=(this._b3[_f3]-~~_g3);let _i3=(_h3-1);while(_h3<0)_h3+=this.buffer[_f3].length;while(_i3<0)_i3+=this.buffer[_f3].length;const frac=_g3-~~_g3;const _j3=this.buffer[_f3][_h3];const _k3=this.buffer[_f3][_i3];return _j3+(_k3-_j3)*frac;}write(_f3,_l3){++this._b3[_f3];this._b3[_f3]%=this.buffer[_f3].length;this.buffer[_f3][this._b3[_f3]]=_l3;
}}registerProcessor("delay-processor",_83);class _m3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._c2();}process(_n3,_o3,_p3){const input=_n3[0];const _q3=_o3[0];const _r3=_o3[1];for(let c=0;c<input.length;++c){const _i2=input[c];const _s3=_q3[c];const _t3=_r3[c];for(let _j2=0;_j2<_i2.length;++_j2){_s3[_j2]=_i2[_j2];_t3[_j2]=_i2[_j2];}}return this._d2;}}class _u3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._c2();}process(_n3,_o3,_p3){const _m2=_n3[0];const _n2=_n3[1];const output=_o3[0];const bypass=_p3.bypass;for(let c=0;c<_n2.length;++c){const _v3=_m2[c];const _w3=_n2[c];const _o2=output[c];for(let _j2=0;_j2<_v3.length;++_j2){const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];if(_k2>0){_o2[_j2]=_w3[_j2];}else {_o2[_j2]=_v3[_j2];}}}return this._d2;}}registerProcessor("eq-input",_m3);registerProcessor("eq-output",_u3);class _x3 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._c2();}process(_g2,_h2,parameters){const input=_g2[0];const output=_h2[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _i2=input[c];const _o2=output[c];for(let _j2=0;_j2<_i2.length;++_j2){_o2[_j2]=_i2[_j2];const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];
if(_k2>0.0){continue;}const _p2=(gain[_j2]!==undefined)?gain[_j2]:gain[0];_o2[_j2]*=_p2;}}return this._d2;}}registerProcessor("gain-processor",_x3);class _y3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _z3=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_z3),minValue:10.0,maxValue:_z3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0}
,{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_s2){super();this._c2();const _t2=_s2.outputChannelCount[0];this._A3=0;this._B3=0;this._C3=0;this._D3=0;this._E3=0;this._F3=new Float32Array(_t2);this._G3=new Float32Array(_t2);this._H3=new Float32Array(_t2);this._I3=new Float32Array(_t2);this._J3=-1;this._K3=-1;this._L3=-1;}process(_g2,_h2,parameters){const input=_g2[0];const output=_h2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;
const _M3=(freq.length===1&&q.length===1&&gain.length===1);if(_M3)this._N3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _i2=input[c];const _o2=output[c];for(let _j2=0;_j2<_i2.length;++_j2){if(_M3===false){const _w2=(freq[_j2]!==undefined)?freq[_j2]:freq[0];const _O3=(q[_j2]!==undefined)?q[_j2]:q[0];const _p2=(gain[_j2]!==undefined)?gain[_j2]:gain[0];this._N3(_w2,_O3,_p2);}const _P3=this._C3*_i2[_j2]+this._D3*this._F3[c]+this._E3*this._G3[c]-this._A3*this._H3[c]-this._B3*this._I3[c];this._G3[c]=this._F3[c];
this._F3[c]=_i2[_j2];this._I3[c]=this._H3[c];this._H3[c]=_P3;const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];_o2[_j2]=(_k2>0)?_i2[_j2]:_P3;}}return this._d2;}_N3(_Q3,_R3,_S3){if(_Q3===this._J3&&_R3===this._K3&&_S3===this._L3)return;const _T3=2*Math.PI*_Q3/sampleRate;const _U3=Math.cos(_T3);const _V3=Math.sqrt(_S3);const _W3=_V3+1;const _X3=_V3-1;const _Y3=_W3*_U3;const _Z3=_X3*_U3;const __3=_W3-_Z3;const _04=_W3+_Z3;const alpha=Math.sin(_T3)/(2*_R3);const _14=(2*Math.sqrt(_V3)*alpha);const _24=__3+_14;
const _A3=2*(_X3-_Y3);const _B3=__3-_14;const _C3=_V3*(_04+_14);const _D3=-2*_V3*(_X3+_Y3);const _E3=_V3*(_04-_14);this._A3=_A3/_24;this._B3=_B3/_24;this._C3=_C3/_24;this._D3=_D3/_24;this._E3=_E3/_24;this._J3=_Q3;this._K3=_R3;this._L3=_S3;}}registerProcessor("hi-shelf-processor",_y3);class _34 extends AudioWorkletProcessor{static get parameterDescriptors(){const _44=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_44),minValue:10.0,maxValue:_44},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_s2){super();this._c2();const _t2=_s2.outputChannelCount[0];this._A3=0;this._B3=0;this._C3=0;this._D3=0;this._E3=0;this._F3=new Float32Array(_t2);this._G3=new Float32Array(_t2);this._H3=new Float32Array(_t2);this._I3=new Float32Array(_t2);this._54=-1;this._K3=-1;}process(_g2,_h2,parameters){const input=_g2[0];const output=_h2[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _M3=(cutoff.length===1&&q.length===1);if(_M3)this._N3(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _i2=input[c];const _o2=output[c];for(let _j2=0;_j2<_i2.length;++_j2){if(_M3===false){const c=(cutoff[_j2]!==undefined)?cutoff[_j2]:cutoff[0];const _O3=(q[_j2]!==undefined)?q[_j2]:q[0];this._N3(c,_O3);}const _P3=this._C3*_i2[_j2]+this._D3*this._F3[c]+this._E3*this._G3[c]-this._A3*this._H3[c]-this._B3*this._I3[c];this._G3[c]=this._F3[c];this._F3[c]=_i2[_j2];this._I3[c]=this._H3[c];
this._H3[c]=_P3;const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];_o2[_j2]=(_k2>0)?_i2[_j2]:_P3;}}return this._d2;}_N3(_64,_R3){if(_64===this._54&&_R3===this._K3)return;const _T3=2*Math.PI*_64/sampleRate;const alpha=Math.sin(_T3)/(2*_R3);const _U3=Math.cos(_T3);const _24=1+alpha;const _A3=-2*_U3;const _B3=1-alpha;const _C3=(1+_U3)/2;const _D3=-1-_U3;const _E3=(1+_U3)/2;this._A3=_A3/_24;this._B3=_B3/_24;this._C3=_C3/_24;this._D3=_D3/_24;this._E3=_E3/_24;this._54=_64;this._K3=_R3;}}registerProcessor("hpf2-processor",
_34);class _74 extends AudioWorkletProcessor{static get parameterDescriptors(){const _z3=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_z3),minValue:10.0,maxValue:_z3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_s2){super();this._c2();const _t2=_s2.outputChannelCount[0];
this._A3=0;this._B3=0;this._C3=0;this._D3=0;this._E3=0;this._F3=new Float32Array(_t2);this._G3=new Float32Array(_t2);this._H3=new Float32Array(_t2);this._I3=new Float32Array(_t2);this._J3=-1;this._K3=-1;this._L3=-1;}process(_g2,_h2,parameters){const input=_g2[0];const output=_h2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _M3=(freq.length===1&&q.length===1&&gain.length===1);if(_M3)this._N3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _i2=input[c];const _o2=output[c];for(let _j2=0;_j2<_i2.length;++_j2){if(_M3===false){const _w2=(freq[_j2]!==undefined)?freq[_j2]:freq[0];const _O3=(q[_j2]!==undefined)?q[_j2]:q[0];const _p2=(gain[_j2]!==undefined)?gain[_j2]:gain[0];this._N3(_w2,_O3,_p2);}const _P3=this._C3*_i2[_j2]+this._D3*this._F3[c]+this._E3*this._G3[c]-this._A3*this._H3[c]-this._B3*this._I3[c];this._G3[c]=this._F3[c];this._F3[c]=_i2[_j2];this._I3[c]=this._H3[c];this._H3[c]=_P3;const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];
_o2[_j2]=(_k2>0)?_i2[_j2]:_P3;}}return this._d2;}_N3(_Q3,_R3,_S3){if(_Q3===this._J3&&_R3===this._K3&&_S3===this._L3)return;const _T3=2*Math.PI*_Q3/sampleRate;const _U3=Math.cos(_T3);const _V3=Math.sqrt(_S3);const _W3=_V3+1;const _X3=_V3-1;const _Y3=_W3*_U3;const _Z3=_X3*_U3;const __3=_W3-_Z3;const _04=_W3+_Z3;const alpha=Math.sin(_T3)/(2*_R3);const _14=(2*Math.sqrt(_V3)*alpha);const _24=_04+_14;const _A3=-2*(_X3+_Y3);const _B3=_04-_14;const _C3=_V3*(__3+_14);const _D3=2*_V3*(_X3-_Y3);const _E3=_V3*(__3-_14);this._A3=_A3/_24;
this._B3=_B3/_24;this._C3=_C3/_24;this._D3=_D3/_24;this._E3=_E3/_24;this._J3=_Q3;this._K3=_R3;this._L3=_S3;}}registerProcessor("lo-shelf-processor",_74);class _84 extends AudioWorkletProcessor{static get parameterDescriptors(){const _44=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_44),minValue:10.0,maxValue:_44},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(_s2){super();this._c2();const _t2=_s2.outputChannelCount[0];this._A3=0;this._B3=0;this._C3=0;this._D3=0;this._E3=0;this._F3=new Float32Array(_t2);this._G3=new Float32Array(_t2);this._H3=new Float32Array(_t2);this._I3=new Float32Array(_t2);this._54=-1;this._K3=-1;}process(_g2,_h2,parameters){const input=_g2[0];const output=_h2[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _M3=(cutoff.length===1&&q.length===1);if(_M3)this._N3(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _i2=input[c];const _o2=output[c];for(let _j2=0;_j2<_i2.length;++_j2){if(_M3===false){const c=(cutoff[_j2]!==undefined)?cutoff[_j2]:cutoff[0];const _O3=(q[_j2]!==undefined)?q[_j2]:q[0];this._N3(c,_O3);}const _P3=this._C3*_i2[_j2]+this._D3*this._F3[c]+this._E3*this._G3[c]-this._A3*this._H3[c]-this._B3*this._I3[c];this._G3[c]=this._F3[c];this._F3[c]=_i2[_j2];this._I3[c]=this._H3[c];this._H3[c]=_P3;const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];_o2[_j2]=(_k2>0)?_i2[_j2]:_P3;
}}return this._d2;}_N3(_64,_R3){if(_64===this._54&&_R3===this._K3)return;const _T3=2*Math.PI*_64/sampleRate;const alpha=Math.sin(_T3)/(2*_R3);const _U3=Math.cos(_T3);const _24=1+alpha;const _A3=-2*_U3;const _B3=1-alpha;const _C3=(1-_U3)/2;const _D3=1-_U3;const _E3=(1-_U3)/2;this._A3=_A3/_24;this._B3=_B3/_24;this._C3=_C3/_24;this._D3=_D3/_24;this._E3=_E3/_24;this._54=_64;this._K3=_R3;}}registerProcessor("lpf2-processor",_84);class _94 extends AudioWorkletProcessor{static get parameterDescriptors(){const _z3=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_z3),minValue:10.0,maxValue:_z3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_s2){super();this._c2();const _t2=_s2.outputChannelCount[0];this._A3=0;this._B3=0;this._C3=0;this._D3=0;this._E3=0;this._F3=new Float32Array(_t2);this._G3=new Float32Array(_t2);
this._H3=new Float32Array(_t2);this._I3=new Float32Array(_t2);this._J3=-1;this._K3=-1;this._L3=-1;}process(_g2,_h2,parameters){const input=_g2[0];const output=_h2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _M3=(freq.length===1&&q.length===1&&gain.length===1);if(_M3)this._N3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _i2=input[c];const _o2=output[c];for(let _j2=0;_j2<_i2.length;++_j2){if(_M3===false){const _w2=(freq[_j2]!==undefined)?freq[_j2]:freq[0];
const _O3=(q[_j2]!==undefined)?q[_j2]:q[0];const _p2=(gain[_j2]!==undefined)?gain[_j2]:gain[0];this._N3(_w2,_O3,_p2);}const _P3=this._C3*_i2[_j2]+this._D3*this._F3[c]+this._E3*this._G3[c]-this._A3*this._H3[c]-this._B3*this._I3[c];this._G3[c]=this._F3[c];this._F3[c]=_i2[_j2];this._I3[c]=this._H3[c];this._H3[c]=_P3;const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];_o2[_j2]=(_k2>0)?_i2[_j2]:_P3;}}return this._d2;}_N3(_Q3,_R3,_S3){if(_Q3===this._J3&&_R3===this._K3&&_S3===this._L3)return;const _T3=2*Math.PI*_Q3/sampleRate;
const _U3=Math.cos(_T3);const _V3=Math.sqrt(_S3);const alpha=Math.sin(_T3)/(2*_R3);const _a4=alpha/_V3;const _b4=alpha*_V3;const _24=1+_a4;const _A3=-2*_U3;const _B3=1-_a4;const _C3=1+_b4;const _D3=_A3;const _E3=1-_b4;this._A3=_A3/_24;this._B3=_B3/_24;this._C3=_C3/_24;this._D3=_D3/_24;this._E3=_E3/_24;this._J3=_Q3;this._K3=_R3;this._L3=_S3;}}registerProcessor("peak-eq-processor",_94);class _c4{constructor(_d4){this._e4=0;this._f4=0;this.feedback=0;this._g4=0;this.buffer=new Float32Array(_d4);this._h4=0;}process(_l3){
const out=this.buffer[this._h4];this._g4=(this._g4*this._e4)+(out*this._f4);this.buffer[this._h4]=_l3+(this._g4*this.feedback);++this._h4;this._h4%=this.buffer.length;return out;}_i4(_j4){this.feedback=Math.min(Math.max(0,_j4),1);}_k4(_l4){this._e4=Math.min(Math.max(0,_l4),1);this._f4=1-this._e4;}}class _m4{constructor(_d4){this.feedback=0;this.buffer=new Float32Array(_d4);this._h4=0;}process(_l3){const out=this.buffer[this._h4];this.buffer[this._h4]=_l3+(out*this.feedback);++this._h4;this._h4%=this.buffer.length;
return(out-_l3);}_i4(_j4){this.feedback=Math.min(Math.max(0,_j4),1);}}class _n4 extends AudioWorkletProcessor{static _o4=8;static _p4=4;static _q4=0.015;static _r4=0.4;static _s4=0.28;static _t4=0.7;static _u4=[1116,1188,1277,1356,1422,1491,1557,1617];static _v4=[1139,1211,1300,1379,1445,1514,1580,1640];static _w4=[556,441,341,225];static _x4=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_s2){super();this._c2();const _t2=_s2.outputChannelCount[0];this._y4=-1;this._z4=-1;this._A4=new Array(_t2);this._B4=new Array(_t2);const _C4=[_n4._u4,_n4._v4];const _D4=[_n4._w4,_n4._x4];for(let c=0;c<_t2;++c){this._A4[c]=new Array(_n4._o4);this._B4[c]=new Array(_n4._p4);for(let i=0;i<_n4._o4;
++i)this._A4[c][i]=new _c4(_C4[c%_C4.length][i]);for(let i=0;i<_n4._p4;++i)this._B4[c][i]=new _m4(_D4[c%_D4.length][i]);}this._E4(0.5);this._k4(0.5);for(let c=0;c<_t2;++c)for(let i=0;i<_n4._p4;++i)this._B4[c][i]._i4(0.5);}process(_g2,_h2,parameters){const input=_g2[0];const output=_h2[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _i2=input[c];const _o2=output[c];for(let _F4=0;_F4<_i2.length;++_F4){const _j2=(size[_F4]!==undefined)?size[_F4]:size[0];
const _G4=(damp[_F4]!==undefined)?damp[_F4]:damp[0];this._E4(_j2);this._k4(_G4);_o2[_F4]=_i2[_F4];let out=0;const _x2=_i2[_F4]*_n4._q4;for(let i=0;i<_n4._o4;++i)out+=this._A4[c][i].process(_x2);for(let i=0;i<_n4._p4;++i)out=this._B4[c][i].process(out);const _k2=(bypass[_F4]!==undefined)?bypass[_F4]:bypass[0];if(_k2>0.0){continue;}const _z2=(mix[_F4]!==undefined)?mix[_F4]:mix[0];_o2[_F4]*=(1-_z2);_o2[_F4]+=(out*_z2);}}return this._d2;}_E4(_d4){if(_d4===this._y4)return;const size=(_d4*_n4._s4)+_n4._t4;for(let c=0;
c<this._A4.length;++c)for(let i=0;i<_n4._o4;++i)this._A4[c][i]._i4(size);this._y4=_d4;}_k4(_l4){if(_l4===this._z4)return;const damp=_l4*_n4._r4;for(let c=0;c<this._A4.length;++c)for(let i=0;i<_n4._o4;++i)this._A4[c][i]._k4(damp);this._z4=_l4;}}registerProcessor("reverb1-processor",_n4);class _H4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,
maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_s2){super();this._c2();const _t2=_s2.outputChannelCount[0];this._I4=new Array(_t2).fill(1.0);this._J4=new Array(_t2).fill(0.0);this._K4=new Array(_t2).fill(_L4._M4._N4);this._O4=new Array(_t2);for(let c=0;c<_t2;++c){this._O4[c]=new _P4();
this._O4[c]._Q4(sampleRate);this._O4[c]._R4(this._I4[c]);this._O4[c]._S4(this._K4[c]);if(c%2===1){this._O4[c]._T4(this._J4[c]);}}}process(_g2,_h2,parameters){const input=_g2[0];const output=_h2[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _i2=input[c];const _o2=output[c];for(let _j2=0;_j2<_i2.length;++_j2){_o2[_j2]=_i2[_j2];const _y2=(rate[_j2]!==undefined)?rate[_j2]:rate[0];
const _U4=(offset[_j2]!==undefined)?offset[_j2]:offset[0];const _V4=(shape[_j2]!==undefined)?shape[_j2]:shape[0];this._W4(c,_y2,_U4,_V4);const _X4=this._O4[c]._d3();const _k2=(bypass[_j2]!==undefined)?bypass[_j2]:bypass[0];if(_k2>0.0){continue;}const i=(intensity[_j2]!==undefined)?intensity[_j2]:intensity[0];const out=_i2[_j2]*_X4*i;_o2[_j2]*=(1.0-i);_o2[_j2]+=out;}}return this._d2;}_W4(_f3,_Y4,_Z4,__4){if(_Y4!==this._I4[_f3]){this._O4[_f3]._R4(_Y4);this._I4[_f3]=_Y4;}if(_Z4!==this._J4[_f3]){if(_f3%2===1){
this._O4[_f3]._T4(_Z4);}this._J4[_f3]=_Z4;}if(__4!==this._K4[_f3]){this._O4[_f3]._S4(__4);this._K4[_f3]=__4;}}}registerProcessor("tremolo-processor",_H4);function _L4(){}_L4._M4={_N4:0,_05:1,_15:2,_25:3,_35:4,_45:5};_L4._55=function(_65){return 1.0-_65;};_L4._75=function(_65){return _65;};_L4._85=function(_65){return 0.5*(Math.sin((_65*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_L4._95=function(_65){if(_65<0.5){return 0.0;}return 1.0;};_L4._a5=function(_65){if(_65<0.5){return 2.0*_65;}return 2.0-(2.0*_65);};_L4._b5=[_L4._55,
_L4._75,_L4._85,_L4._95,_L4._a5];_c5._d5=512;_c5._e5=1.0/_c5._d5;function _c5(_f5){this.data=new Float32Array(_c5._d5);for(let i=0;i<_c5._d5;++i){this.data[i]=_f5(i*_c5._e5);}}_c5.prototype._d3=function(_65){_65=Math.max(0.0,_65);_65=Math.min(_65,1.0);const _g5=_65*_c5._d5;const _h5=~~_g5;const _i5=_g5-_h5;let _h3=_h5;let _i3=_h3+1;if(_h3>=_c5._d5){_h3-=_c5._d5;}if(_i3>=_c5._d5){_i3-=_c5._d5;}const _j3=this.data[_h3];const _k3=this.data[_i3];return _j3+(_k3-_j3)*_i5;};_P4._j5=[];_P4._k5=false;_P4._l5=0.0;_P4._z3=20.0;
function _P4(){this._m5=48000;this.shape=_L4._M4._15;this.freq=1.0;this._n5=0.0;this._e5=0.0;this._o5=0.0;if(_P4._k5==true){return;}for(let i=0;i<_L4._M4._45;++i){_P4._j5[i]=new _c5(_L4._b5[i]);}_P4._k5=true;}_P4._p5=function(){return(_P4._k5==true);};_P4.prototype._Q4=function(_q5){this._m5=_q5;this._r5();};_P4.prototype._R4=function(_Q3){_Q3=Math.max(_P4._l5,_Q3);_Q3=Math.min(_Q3,_P4._z3);this.freq=_Q3;this._r5();};_P4.prototype._T4=function(_Z4){_Z4=Math.max(0.0,_Z4);_Z4=Math.min(_Z4,1.0);const _s5=_Z4-this._o5;
this._o5=_Z4;this._n5+=_s5;while(this._n5>=1.0){this._n5-=1.0;}while(this._n5<0.0){this._n5+=1.0;}};_P4.prototype._S4=function(__4){__4=Math.max(0,__4);__4=Math.min(__4,_L4._M4._45-1);this.shape=__4;};_P4.prototype._d3=function(){const result=_P4._j5[this.shape]._d3(this._n5);this._n5+=this._e5;while(this._n5>=1.0){this._n5-=1.0;}return result;};_P4.prototype._r5=function(){this._e5=this.freq/this._m5;};